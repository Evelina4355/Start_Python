# #Цикл for(повторение через последовательность или коллекцию элементов)#
# for value in collection :
#     # value - название переменной, которое будет использовано внутри цикла.
#      # Объяснение этой переменной немного отличается, для неё нужно использовать =
#     # collection - коллекция элементов. В каждой интерации цикла значение переменной
#      # value будет меняться интерпретатором, принимая значение следующего
#       # элемента из последовательности collection
# # Пример использования
# for i in range(3):
# rint(i+1, "шаг цикла")
# print("Первый цикл закончился!")
# a = {1: 'x', 2: 'y', 3: 'z'}
# for index, value in a.items():
#     print(f'"Позиция: {index} -> Значение: {value}"')
# # Перебор значений коллекции с помощью for
#     #список list
#  for value in [1, 2, 3, 4, 5,]:
#      print(value)
#
#  # Кортеж tuple
#  for value in (1, 2, 3, 4, 5):
#      print(value)
#  # Множество set
# for value in {1, 2, 3, 4, 5}:
#     print(value)
# print(f'первый range')
# for value in range(10):
#     print(f'Значение - {value}')
# # Генерация последовательности чисел от 0 до 9
# print(f'второй range')
# for value in range(1, 11, 2):
#     print(f'Значение - {value}')

# Генерация последовательности чисел от 1 до 10 с шагом 2
# print(f'третий range')
# for value in range(10, -1, -1):
#     print(f'Значение - {value}')


print('Задача 2 счетчик циклов')
s = 1
for n in range(1, 6):
    s *=n
print(f'Переменная s = {s}')
###############
for pos, value in enumerate("абвcdefhij", start=1):
    print("Позиция:", pos, "->" "Значение", value)
###############

count =0
while count < 5:
    count += 1
print(f' "Значение" =  {count}')

#.............

a, s, p = 1, 150, 200
while True:
    if a > 10:
        break
    a += 2
    p += a
    s += p
    print(f'Переменная s = {s}')

#..............

c, d, = 750, 90
while True:
 if d > 0:
 break
d = d - 10
c = c/2 + 50
print(f'Переменная c = {c}')

#...............
s, = 1
while True:
    if n = 1 to 5 :
        break
s: = s * n
 print(f'Переменная s = {s}')

#...............
m, n, = 12, 5
while True:
 if m = n:
   if m > n:
        break
n: = n - 3
m: = m - 2*n
 print(f'Переменная m = {m}')
 print(f'Переменная n = {n}')

#................
k, l = [] , []
for i in range ( 1, 11) :
    k. append ( 10 -i)
for i in range(1,11) :
    l.append (k[5] - k[i-1](
print(k)
print(l)

k, l = list(range(1, 11)), list( range(1,11))

for i in range(1, 11):
    k[i - 1] = 10 - i
for i in range(1, 11):
    l[i - 1] = k[5] - k[i - 1]
print(k)
print(l)
print(f'Количестыо отрицательных элементов массива l = {len([value for value in l if value < 0])}')
k, l = list(range(1, 11)), list(range(1, 11))

for i in range(1, 11):
    k[i - 1] = 10 - i 
for i in range(1, 11):
    l[i - 1] = k[5] - k[i - 1]
print(k)
print(l)
count_k = 0
for value in k:
    if value < 0:
         count_k += 1
count_l = 0
for value in l:
    if value < 0:
         count_l += 1
print(f'Количество отрицательных элементов = {count_k + count_l}')
# list comperehensions
count_k = len([value for value in k if value < 0 ])
count_l = len([value for value in l if value < 0 ])
print( f'Количестыо отрицотельных элементов = {count_k + count_l}')
